@model _10717proiect.Models.Event.EventListViewModel
@{
     ViewBag.Title = Model.eventName;
     Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="ro">
<head>
     <meta charset="utf-8" />
     <title>@ViewBag.Title</title>
     <meta name="viewport" content="width=device-width, initial-scale=1" />

     <!-- Anti-forgery token pentru AJAX -->
     <meta name="csrf-token" content="@Html.AntiForgeryToken()">

     <style>
          /* Reset și bază */
          *, *::before, *::after {
               box-sizing: border-box;
          }
          body {
               margin: 0;
               font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
               background-color: #fff;
               color: #333;
               line-height: 1.5;
          }

          /* Container */
          .Gcustom-container {
               max-width: 1140px;
               margin: 6rem auto 4rem auto;
               padding: 0 15px;
               background-color: #ebebeb;
               border-radius: 20px;
               padding: 20px;
          }

          /* Buton rezervare mare */
          .Gbtn-danger {
               display: block;
               width: 100%;
               background-color: #db3056;
               border: none;
               color: white;
               font-weight: 700;
               padding: 0.75rem 1rem;
               border-radius: 0.375rem;
               font-size: 1.125rem;
               cursor: pointer;
               user-select: none;
               transition: background-color 0.3s ease;
               text-align: center;
               text-decoration: none;
          }
          .Gbtn-danger:hover {
               background-color: #b52a47;
               color: white;
               text-decoration: none;
          }

          .Gbtn-danger:disabled {
               background-color: #6c757d;
               cursor: not-allowed;
          }

          /* Notification styles */
          .notification {
               position: fixed;
               top: 20px;
               right: 20px;
               padding: 15px 20px;
               border-radius: 5px;
               color: white;
               font-weight: 600;
               z-index: 9999;
               box-shadow: 0 4px 12px rgba(0,0,0,0.15);
               animation: slideIn 0.3s ease;
          }

          .notification.success {
               background-color: #28a745;
          }

          .notification.error {
               background-color: #dc3545;
          }

          @@keyframes slideIn {
               from {
                    transform: translateX(100%);
                    opacity: 0;
               }
               to {
                    transform: translateX(0);
                    opacity: 1;
               }
          }

          /* Spinner pentru loading */
          .spinner {
               display: none;
               width: 20px;
               height: 20px;
               border: 2px solid transparent;
               border-top: 2px solid white;
               border-radius: 50%;
               animation: spin 1s linear infinite;
               margin-right: 10px;
          }

          @@keyframes spin {
               0% { transform: rotate(0deg); }
               100% { transform: rotate(360deg); }
          }

          /* Restul stilurilor din originalul tău... */
          /* (păstrează toate celelalte stiluri din originalul Details.cshtml) */

          .navbar-custom{
               top: 0;
               font-weight:600;
          }
               .navbar-custom .topnav-menu .nav-link {
                    padding: 0 15px;
                    margin: -5px 2px;
                    font-weight: 600;
                    color: #000000;
                    border-radius: 20px;
                    min-width: 32px;
                    display: flex;
                    line-height: 65px;
                    text-align: center;
                    max-height: 60px;
                    align-items: center;
                    align-content: center;
                    justify-content: center;
                    font-size: 20px;
               }

               .Gcustom-header-flex {
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: space-between;
                    align-items: flex-start;
                    gap: 1rem;
               }
          .Gcustom-event-title {
               font-size: 2.5rem;
               font-weight: 700;
               color: #333333;
          }
          .Gcustom-event-meta {
               display: flex;
               flex-wrap: wrap;
               gap: 0.75rem;
               margin-top: 0.5rem;
               font-size: 0.95rem;
               color: #6c757d;
          }
          .Gcustom-event-meta i {
               vertical-align: middle;
          }
          /* badge categorie */
          .Gcustom-badge-primary {
               display: inline-block;
               background-color: #db3056;
               color: #fff;
               padding: 0.3rem 0.8rem;
               border-radius: 0.75rem;
               font-size: 0.85rem;
               font-weight: 600;
               line-height: 1;
               user-select: none;
          }
          /* pret badge */
          .Gcustom-price-badge {
               background: linear-gradient(135deg, #db3056, #e94570);
               color: white;
               padding: 0.75rem 1.5rem;
               border-radius: 50px;
               font-size: 1.25rem;
               font-weight: 700;
               box-shadow: 0 4px 15px rgba(219, 48, 86, 0.3);
               white-space: nowrap;
               align-self: center;
          }
          /* Layout row */
          .Grow {
               display: flex;
               flex-wrap: wrap;
               margin-left: -15px;
               margin-right: -15px;
          }
          /* Col - 8 / 4 */
          .Gcol-lg-8, .Gcol-lg-4 {
               padding-left: 15px;
               padding-right: 15px;
          }
          .Gcol-lg-8 {
               flex: 0 0 66.66667%;
               max-width: 66.66667%;
               margin-bottom: 1.5rem;
          }
          .Gcol-lg-4 {
               flex: 0 0 33.33333%;
               max-width: 33.33333%;
               margin-bottom: 1.5rem;
          }

          /* imagine container */
          .Gcustom-image-container {
               position: relative;
               overflow: hidden;
               border-radius: 12px;
               margin-bottom: 1.5rem;
          }
          .Gcustom-image-container img {
               width: 100%;
               max-height: 400px;
               object-fit: cover;
               border-radius: 12px;
               transition: transform 0.4s ease;
               display: block;
          }
          .Gimg-hover-zoom:hover img {
               transform: scale(1.05);
          }
          /* card */
          .Gcustom-card {
               background-color: white;
               box-shadow: 0 2px 6px rgba(0,0,0,0.1);
               border-radius: 12px;
               margin-bottom: 1.5rem;
          }
          .Gx {
               background-color: #ffffffc7;
               border-radius: 15px;
          }
          .Gcustom-border-0 {
               border: none;
          }
          .Gcustom-shadow-sm {
               box-shadow: 0 2px 6px rgba(0,0,0,0.05);
          }
          .Gcustom-rounded-4 {
               border-radius: 1rem;
          }
          .Gcustom-card-body {
               padding: 1rem 1.5rem;
          }
          /* text muted */
          .Gcustom-text-muted {
               color: #6c757d;
          }
          /* etichete detalii */
          .Gcustom-detail-label {
               margin-bottom: 0.25rem;
               font-weight: 600;
               color: #212529;
               display: flex;
               align-items: center;
               justify-content: center;
               gap: 20px;
          }
          .Gcustom-detail-label i {
               color: #db3056;
               margin-right: 0.5rem;
               font-size: 1.2rem;
          }
          .Gcustom-detail-value {
               margin-left: 2rem;
               color: #444;
               white-space: pre-line;
          }
          /* sidebar rezervare */
          .Gcustom-current-price {
               font-size: 2rem;
               color: #db3056;
               font-weight: 700;
          }
          .Gcustom-price-currency {
               font-size: 1rem;
               font-weight: 400;
          }
          .Gcustom-bg-light {
               background-color: #f8f9fa;
               border-radius: 0.375rem;
          }
          .Gcustom-event-quick-info {
               font-size: 0.9rem;
               color: #6c757d;
          }
          .Gcustom-event-quick-info > div {
               margin-bottom: 0.5rem;
               display: flex;
               align-items: center;
          }
          .Gcustom-event-quick-info i {
               margin-right: 0.5rem;
               font-size: 1.2rem;
          }

          /* input grupe */
          .Ginput-group {
               display: flex;
               align-items: center;
               border: 1.5px solid #6c757d;
               border-radius: 0.375rem;
               overflow: hidden;
               width: 100%;
               max-width: 220px;
          }
          .Ginput-group button {
               background: transparent;
               border: none;
               color: #6c757d;
               font-weight: 700;
               font-size: 1.25rem;
               width: 36px;
               height: 36px;
               cursor: pointer;
               user-select: none;
               transition: background-color 0.3s ease;
          }
          .Ginput-group button:hover {
               background-color: #6c757d;
               color: white;
          }
          .Ginput-group input[type=number] {
               -moz-appearance: textfield;
               -webkit-appearance: none;
               appearance: none;
               border: none;
               outline: none;
               text-align: center;
               font-size: 1rem;
               width: 160px;
               padding: 0.3rem 0;
               user-select: none;
          }
     </style>
</head>
<body>
     <div class="Gcustom-container">
          <!-- Buton Înapoi -->
          <div class="Gcustom-back-btn-container">
               <a href="@Url.Action("Index", "Events")" class="Gcustom-btn-outline-secondary">
                    <i class="bi bi-arrow-left me-2"></i> Înapoi la evenimente
               </a>
          </div>

          <!-- Header eveniment -->
          <div class="Gcustom-event-header">
               <div class="Gcustom-header-flex">
                    <div>
                         <h1 class="Gcustom-event-title">@Model.eventName</h1>
                         <div class="Gcustom-event-meta">
                              <span class="Gcustom-badge-primary">@Model.eventCategory</span>
                              <span class="Gcustom-text-muted"><i class="bi bi-calendar3 me-1"></i> @Model.eventDate.ToString("dd MMMM yyyy, HH:mm")</span>
                              <span class="Gcustom-text-muted" style="margin-left: 1rem;"><i class="bi bi-geo-alt me-1"></i> @Model.eventLocation</span>
                         </div>
                    </div>
                    <div class="Gcustom-price-badge">@Model.eventPrice MDL</div>
               </div>
          </div>

          <div class="Grow">
               <!-- Imagine și descriere -->
               <div class="Gcol-lg-8">
                    <div class="Gcustom-image-container Gimg-hover-zoom">
                         <img src="@(!string.IsNullOrEmpty(Model.eventImage) ? Url.Content(Model.eventImage) : Url.Content("~/Resources/Home/event.png"))"
                              alt="@Model.eventName" />
                    </div>

                    <div class="Gcustom-card Gx Gcustom-border-0  Gcustom-shadow-sm Gcustom-rounded-4">
                         <div class="Gcustom-card-body">
                              <h3 class="fw-bold">Despre eveniment</h3>
                              @if (!string.IsNullOrEmpty(Model.eventDescription))
                              {
                                   @Html.Raw(Model.eventDescription.Replace("\n", "<br>"))
                              }
                              else
                              {
                                   <p class="Gcustom-text-muted">Nu există o descriere disponibilă.</p>
                              }
                         </div>
                    </div>

                    <div class="Gcustom-card Gx Gcustom-border-0 Gcustom-shadow-sm Gcustom-rounded-4">
                         <div class="Gcustom-card-body">
                              <h3 class="fw-bold">Detalii eveniment</h3>
                              <div class="Grow">
                                   <div class="Gcol-md-6" style="margin-bottom:1.5rem; border-bottom: 1px solid #ddd; padding-bottom: 1rem;">
                                        <div class="Gcustom-detail-label"><i class="bi bi-calendar3 me-2"></i><strong>Data și ora</strong></div>
                                        <div class="Gcustom-detail-value">
                                             @Model.eventDate.ToString("dddd, dd MMMM yyyy")<br />
                                             Ora: @Model.eventDate.ToString("HH:mm")
                                        </div>
                                   </div>
                                   <div class="Gcol-md-6" style="margin-bottom:1.5rem; border-bottom: 1px solid #ddd; padding-bottom: 1rem;">
                                        <div class="Gcustom-detail-label"><i class="bi bi-geo-alt me-2"></i><strong>Locația</strong></div>
                                        <div class="Gcustom-detail-value">@Model.eventLocation</div>
                                   </div>
                                   <div class="Gcol-md-6" style="margin-bottom:1.5rem; border-bottom: 1px solid #ddd; padding-bottom: 1rem;">
                                        <div class="Gcustom-detail-label"><i class="bi bi-tag me-2"></i><strong>Categoria</strong></div>
                                        <div class="Gcustom-detail-value">@Model.eventCategory</div>
                                   </div>
                                   <div class="Gcol-md-6" style="margin-bottom:1.5rem;">
                                        <div class="Gcustom-detail-label"><i class="bi bi-currency-exchange me-2"></i><strong>Preț</strong></div>
                                        <div class="Gcustom-detail-value">@Model.eventPrice MDL</div>
                                   </div>
                              </div>
                         </div>
                    </div>

               </div>

               <!-- Sidebar rezervare -->
               <div class="Gcol-lg-4">
                    <div class="Gcustom-card Gx Gcustom-border-0 Gcustom-shadow-sm Gcustom-rounded-4" style=" top: 20px;">
                         <div class="Gcustom-card-body">
                              <h4 class="text-center fw-bold" style="margin-bottom: 1rem;">Rezervă bilet</h4>

                              <div class="text-center" style="margin-bottom: 1.5rem;">
                                   <div class="Gcustom-current-price">@Model.eventPrice <span class="Gcustom-price-currency">MDL</span></div>
                                   <small class="Gcustom-text-muted">per bilet</small>
                              </div>

                              <div style="margin-bottom: 1.5rem;">
                                   <label class="form-label fw-medium">Număr bilete</label>
                                   <div class="Ginput-group">
                                        <button type="button" id="decreaseBtn">-</button>
                                        <input type="number" id="ticketQuantity" value="1" min="1" max="10" />
                                        <button type="button" id="increaseBtn">+</button>
                                   </div>
                              </div>

                              <div class="Gcustom-bg-light p-3 rounded" style="margin-bottom: 1.5rem; display: flex; justify-content: space-between;">
                                   <span>Total:</span>
                                   <span class="fw-bold" id="totalPrice">@Model.eventPrice MDL</span>
                              </div>

                              <button class="Gbtn Gbtn-danger" id="addToCartBtn" onclick="addToCart(@Model.Id)">
                                   <span class="spinner" id="loadingSpinner"></span>
                                   <i class="bi bi-cart-plus me-2" id="cartIcon"></i>
                                   <span id="buttonText">Adaugă în coș</span>
                              </button>

                              <div class="Gcustom-event-quick-info event-quick-info Gcustom-text-muted" style="margin-top: 1rem;">
                                   <div><i class="bi bi-clock me-2"></i> Eveniment de @(((DateTime.Now - Model.eventDate).TotalDays < 0) ? Math.Abs((DateTime.Now - Model.eventDate).TotalDays).ToString("F0") + " zile" : "astăzi")</div>
                                   <div><i class="bi bi-people me-2"></i> Bilete disponibile</div>
                                   <div><i class="bi bi-shield-check me-2"></i> Plată securizată</div>
                              </div>
                         </div>
                    </div>
               </div>
          </div>
     </div>

     <!-- Anti-forgery token pentru AJAX -->
     @Html.AntiForgeryToken()

     <script>
document.addEventListener('DOMContentLoaded', function() {
    const ticketQuantity = document.getElementById('ticketQuantity');
    const decreaseBtn = document.getElementById('decreaseBtn');
    const increaseBtn = document.getElementById('increaseBtn');
    const totalPrice = document.getElementById('totalPrice');
    const pricePerTicket = @Model.eventPrice;

    function updateTotal() {
        const quantity = parseInt(ticketQuantity.value);
        const total = quantity * pricePerTicket;
        totalPrice.textContent = total + ' MDL';
    }

    decreaseBtn.addEventListener('click', function() {
        const current = parseInt(ticketQuantity.value);
        if (current > 1) {
            ticketQuantity.value = current - 1;
            updateTotal();
        }
    });

    increaseBtn.addEventListener('click', function() {
        const current = parseInt(ticketQuantity.value);
        if (current < 10) {
            ticketQuantity.value = current + 1;
            updateTotal();
        }
    });

    ticketQuantity.addEventListener('change', function() {
        const value = parseInt(this.value);
        if (value < 1) this.value = 1;
        if (value > 10) this.value = 10;
        updateTotal();
    });
});

// Funcție pentru adăugarea în coș
function addToCart(eventId) {
    const quantity = parseInt(document.getElementById('ticketQuantity').value);
    const button = document.getElementById('addToCartBtn');
    const spinner = document.getElementById('loadingSpinner');
    const cartIcon = document.getElementById('cartIcon');
    const buttonText = document.getElementById('buttonText');

    // Obține token-ul CSRF
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    // Disable button și afișează loading
    button.disabled = true;
    spinner.style.display = 'inline-block';
    cartIcon.style.display = 'none';
    buttonText.textContent = 'Se adaugă...';

    // Creează FormData cu token-ul CSRF
    const formData = new FormData();
    formData.append('eventId', eventId);
    formData.append('quantity', quantity);
    formData.append('__RequestVerificationToken', token);

    // Trimite cererea AJAX
    fetch('/Cart/AddToCart', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('success', data.message);

            // Actualizează contorul din header dacă există
            updateCartCounter(data.cartCount);

            // Resetează butonul la starea normală
            buttonText.textContent = 'Adăugat în coș!';
            setTimeout(() => {
                buttonText.textContent = 'Adaugă în coș';
            }, 2000);
        } else {
            showNotification('error', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('error', 'A apărut o eroare la adăugarea în coș.');
    })
    .finally(() => {
        // Reactivează butonul
        button.disabled = false;
        spinner.style.display = 'none';
        cartIcon.style.display = 'inline';
    });
}

// Funcție pentru afișarea notificărilor
function showNotification(type, message) {
    // Elimină notificările existente
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());

    // Creează notificarea
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    // Adaugă în DOM
    document.body.appendChild(notification);

    // Elimină după 5 secunde
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// Funcție pentru actualizarea contorului de coș din header
function updateCartCounter(count) {
    const cartCounters = document.querySelectorAll('.cart-counter');
    cartCounters.forEach(counter => {
        counter.textContent = count;
        if (count > 0) {
            counter.style.display = 'inline';
        } else {
            counter.style.display = 'none';
        }
    });
}

// Funcții de share (păstrează funcțiile existente)
function shareOnFacebook() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent('@Model.eventName');
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}`, '_blank', 'width=600,height=400');
}

function shareOnTwitter() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent('@Model.eventName - @Model.eventDate.ToString("dd MMMM yyyy")');
    window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}`, '_blank', 'width=600,height=400');
}

function shareOnWhatsApp() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent(`@Model.eventName - @Model.eventDate.ToString("dd MMMM yyyy") - ${url}`);
    window.open(`https://wa.me/?text=${text}`, '_blank');
}

function copyLink() {
    navigator.clipboard.writeText(window.location.href).then(function() {
        showNotification('success', 'Link-ul a fost copiat în clipboard!');
    });
}
     </script>
</body>
</html>