@model List<_10717proiect.Models.Location.LocationViewModel>

@{
     ViewBag.Title = "Locații";
     Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
     <!-- Page Header -->
     <div class="page-header mb-4">
          <div class="container">
               <div class="row align-items-center">
                    <div class="col-md-8">
                         <h1 class="mb-0"><i class="bi bi-geo-alt me-2"></i>Locații</h1>
                         <p class="mb-0 mt-2">Descoperă locațiile unde se desfășoară evenimentele</p>
                    </div>
                    <div class="col-md-4 text-md-end">
                         <span class="badge bg-primary" style="font-size: 1.1em; padding: 10px 15px;">
                              @(Model?.Count ?? 0) locații disponibile
                         </span>
                    </div>
               </div>
          </div>
     </div>

     <div class="container">
         

          <!-- Locations Grid -->
          <div class="row" id="locationsGrid">
               @if (Model != null && Model.Any())
               {
                    foreach (var location in Model)
                    {
                         <div class="col-lg-4 col-md-6 col-sm-6 mb-4 location-item"
                              data-name="@location.Name.ToLower()"
                              data-address="@location.Address.ToLower()">
                              <div class="card h-100 location-card">
                                   <div class="position-relative">
                                        <div class="location-card-image-container">
                                             @if (!string.IsNullOrEmpty(location.ImagePath))
                                             {
                                                  <img src="@Url.Content(location.ImagePath)" class="card-img-top" alt="@location.Name">
                                             }
                                             else
                                             {
                                                  <div class="card-img-top location-placeholder">
                                                       <i class="bi bi-geo-alt"></i>
                                                  </div>
                                             }
                                        </div>
                                        <div class="location-type-badge">
                                             <i class="bi bi-building"></i> Locație
                                        </div>
                                   </div>
                                   <div class="card-body">
                                        <h5 class="card-title mb-2">@location.Name</h5>
                                        <div class="location-meta mb-3">
                                             <div class="location-address">
                                                  <i class="bi bi-geo-alt me-1"></i>
                                                  @location.Address
                                             </div>
                                             <div class="location-phone">
                                                  <i class="bi bi-telephone me-1"></i>
                                                  @location.Phone
                                             </div>
                                        </div>
                                        @if (!string.IsNullOrEmpty(location.Description))
                                        {
                                             <p class="location-description">
                                                  @(location.Description.Length > 120 ? location.Description.Substring(0, 120) + "..." : location.Description)
                                             </p>
                                        }
                                        <div class="mt-auto">
                                             <a href="#" class="btn btn-outline-primary btn-sm me-2" onclick="showLocationDetails(@location.Id)">
                                                  <i class="bi bi-eye me-1"></i>Vezi detalii
                                             </a>
                                             <a href="@Url.Action("Index", "Events", new { location = location.Name.ToLower() })" class="btn btn-primary btn-sm">
                                                  <i class="bi bi-calendar-event me-1"></i>Vezi evenimente
                                             </a>
                                        </div>
                                   </div>
                              </div>
                         </div>
                    }
               }
               else
               {
                    <div class="col-12">
                         <div class="alert alert-info text-center">
                              <i class="bi bi-geo-alt" style="font-size: 3rem; color: #6c757d;"></i>
                              <h4 class="mt-3">Nu s-au găsit locații</h4>
                              <p>Momentan nu sunt disponibile locații în sistem.</p>
                         </div>
                    </div>
               }
          </div>

          <!-- No results message -->
          <div id="noResultsMessage" class="col-12" style="display: none;">
               <div class="alert alert-info text-center">
                    <i class="bi bi-search" style="font-size: 3rem; color: #6c757d;"></i>
                    <h4 class="mt-3">Nu s-au găsit locații</h4>
                    <p>Încearcă să modifici filtrele pentru a găsi locații.</p>
                    <button class="btn btn-outline-primary" onclick="resetFilters()">Resetează filtrele</button>
               </div>
          </div>
     </div>
</div>

<!-- Location Details Modal -->
<div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="locationModalLabel" aria-hidden="true">
     <div class="modal-dialog modal-lg">
          <div class="modal-content">
               <div class="modal-header">
                    <h5 class="modal-title" id="locationModalLabel">Detalii locație</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body" id="locationModalBody">
                    <!-- Content will be loaded here -->
               </div>
               <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Închide</button>
                    <a href="#" class="btn btn-primary" id="viewEventsBtn">
                         <i class="bi bi-calendar-event me-1"></i>Vezi evenimente
                    </a>
               </div>
          </div>
     </div>
</div>

<style>
/* Location card styling - FIXED */
     .location-card {
          transition: transform 0.3s ease, box-shadow 0.3s ease;
          border-radius: 8px;
          overflow: hidden;
          border: none; /* Remove border completely */
          background-color: white;
          position: relative;
          z-index: 1;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          * Lower z-index than header */
     }

          .location-card:hover {
               transform: translateY(-5px);
               box-shadow: 0 10px 20px rgba(0,0,0,0.15); /* Enhanced shadow on hover */
               z-index: 2;
          }

.location-card-image-container {
    width: 100%;
    height: 200px;
    overflow: hidden;
    position: relative;
}

.location-card-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.3s ease;
}

.location-card:hover .location-card-image-container img {
    transform: scale(1.05);
}

.location-placeholder {
    width: 100%;
    height: 200px;
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    color: #6c757d;
}

.location-type-badge {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: 500;
    font-size: 12px;
}

.location-meta {
    font-size: 14px;
    color: #6c757d;
}

.location-meta > div {
    margin-bottom: 4px;
}

.location-description {
    font-size: 14px;
    color: #666;
    line-height: 1.4;
}

     .page-header {
          /*  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);*/
          color: white;
          padding: 3rem 0;
          margin-bottom: 2rem;
          position: relative;
          margin-top: 50px;
          z-index: 10; /* Higher z-index for header */
     }

/* Fix container positioning */
.container-fluid {
    position: relative;
    z-index: 1;
}

/* Ensure proper spacing after header */
body {
    padding-top: 0; /* Remove any top padding that might cause overlap */
}

/* Fix for potential header overlap issues */
#topnav {
    position: relative;
    z-index: 1000; /* Very high z-index for navigation */
}

/* Modal fixes */
.modal {
    z-index: 1050; /* Standard Bootstrap modal z-index */
}

.modal-backdrop {
    z-index: 1040; /* Standard Bootstrap backdrop z-index */
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .location-card-image-container {
        height: 180px;
    }

    .page-header {
        padding: 2rem 0; /* Reduce padding on mobile */
        margin-bottom: 1.5rem;
    }
}
</style>

<script>
     let allLocations = [];

     document.addEventListener('DOMContentLoaded', function () {
          // Store all locations data for client-side filtering
          storeLocationsData();

          // Set up event listeners
          setupEventListeners();
     });

     function storeLocationsData() {
          const locationItems = document.querySelectorAll('.location-item');
          allLocations = Array.from(locationItems).map(item => {
               return {
                    element: item,
                    name: item.dataset.name,
                    address: item.dataset.address
               };
          });
     }

     function setupEventListeners() {
          // Search input
          const searchInput = document.getElementById('searchInput');
          if (searchInput) {
               searchInput.addEventListener('input', function () {
                    applyFilters();
               });
          }

          // City filter
          const cityFilter = document.getElementById('cityFilter');
          if (cityFilter) {
               cityFilter.addEventListener('change', function () {
                    applyFilters();
               });
          }
     }

     function applyFilters() {
          const searchTerm = document.getElementById('searchInput').value.toLowerCase();
          const selectedCity = document.getElementById('cityFilter').value.toLowerCase();

          let filteredLocations = allLocations.filter(location => {
               // Search filter
               if (searchTerm && !location.name.includes(searchTerm) && !location.address.includes(searchTerm)) {
                    return false;
               }

               // City filter
               if (selectedCity && !location.address.includes(selectedCity)) {
                    return false;
               }

               return true;
          });

          // Show/hide locations
          allLocations.forEach(location => {
               location.element.style.display = 'none';
          });

          filteredLocations.forEach(location => {
               location.element.style.display = 'block';
          });

          // Show no results message if needed
          showNoResultsMessage(filteredLocations.length === 0);
     }

     function showNoResultsMessage(show) {
          const noResultsDiv = document.getElementById('noResultsMessage');
          const locationsGrid = document.getElementById('locationsGrid');

          if (show) {
               noResultsDiv.style.display = 'block';
               locationsGrid.appendChild(noResultsDiv);
          } else {
               noResultsDiv.style.display = 'none';
          }
     }

     function resetFilters() {
          document.getElementById('searchInput').value = '';
          document.getElementById('cityFilter').value = '';
          applyFilters();
     }

     function showLocationDetails(locationId) {
          // This would typically fetch location details from the server
          // For now, we'll show a placeholder modal
          const modal = new bootstrap.Modal(document.getElementById('locationModal'));
          document.getElementById('locationModalBody').innerHTML = `
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Se încarcă...</span>
            </div>
            <p class="mt-2">Se încarcă detaliile locației...</p>
        </div>
    `;
          modal.show();

          // Simulate loading
          setTimeout(() => {
               document.getElementById('locationModalBody').innerHTML = `
            <p>Detaliile locației vor fi afișate aici.</p>
            <p>Această funcționalitate poate fi extinsă pentru a afișa:</p>
            <ul>
                <li>Galerie foto</li>
                <li>Facilități disponibile</li>
                <li>Program de lucru</li>
                <li>Harta cu locația</li>
                <li>Evenimente viitoare</li>
            </ul>
        `;
          }, 1000);
     }
</script>