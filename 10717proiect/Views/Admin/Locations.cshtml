@model List<_10717proiect.Models.Location.LocationViewModel>

@{
     ViewBag.Title = "Locații";
     Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container-fluid p-0">
     <div class="row">
          <div class="col-12">
               <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                         <div>
                              <h5 class="card-title mb-1">Locații</h5>
                              <h6 class="card-subtitle text-muted">Adăugați sau gestionați locațiile pentru evenimente.</h6>
                         </div>
                         <button class="btn btn-primary" onclick="showLocationForm()">
                              <i class="bi bi-plus-lg me-1"></i>Adaugă locație
                         </button>
                    </div>
                    <div class="card-body">
                         <!-- Success/Error Messages-->
                         @if (TempData["SuccessMessage"] != null)
                         {
                              <div class="alert alert-success alert-dismissible fade show" role="alert">
                                   @TempData["SuccessMessage"]
                                   <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                              </div>
                         }
                         @if (TempData["ErrorMessage"] != null)
                         {
                              <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                   @TempData["ErrorMessage"]
                                   <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                              </div>
                         }

                         <!-- Anti-forgery token for AJAX -->
                         @Html.AntiForgeryToken()

                         <!-- Form for adding/editing location -->
                         <form class="d-none mb-4" id="locationForm" method="post" action="@Url.Action("AddLocation", "Admin")" enctype="multipart/form-data">
                              @Html.AntiForgeryToken()
                              <input type="hidden" id="locationId" name="Id" value="0">

                              <!-- Numele Locației -->
                              <div class="row">
                                   <div class="col-12 mb-3">
                                        <label for="locationName" class="form-label">Numele Locației *</label>
                                        <input type="text" class="form-control" id="locationName" name="Name" placeholder="Introduceți numele locației" required>
                                   </div>
                              </div>

                              <!-- Adresa -->
                              <div class="row">
                                   <div class="col-12 mb-3">
                                        <label for="locationAddress" class="form-label">Adresa *</label>
                                        <input type="text" class="form-control" id="locationAddress" name="Address" placeholder="Introduceți adresa completă" required>
                                   </div>
                              </div>

                              <!-- Imaginea Locației -->
                              <div class="row">
                                   <div class="col-12 mb-3">
                                        <label for="locationImageFile" class="form-label">Imaginea Locației</label>
                                        <input type="file" class="form-control" id="locationImageFile" name="ImageFile" accept="image/*" onchange="previewLocationImage(this)">
                                        <small class="text-muted">Formate acceptate: JPG, PNG, GIF. Mărimea maximă: 5MB.</small>

                                        <!-- Preview imagine -->
                                        <div id="imagePreview" class="mt-3 d-none">
                                             <div class="card" style="max-width: 300px;">
                                                  <img id="previewImg" class="card-img-top" style="height: 200px; object-fit: cover;">
                                                  <div class="card-body p-2">
                                                       <small class="text-muted">Previzualizare imagine</small>
                                                  </div>
                                             </div>
                                        </div>
                                   </div>
                              </div>

                              <!-- Butoane -->
                              <div class="row">
                                   <div class="col-12 mb-3 text-end">
                                        <button class="btn btn-secondary me-2" type="button" onclick="hideLocationForm()">Anulează</button>
                                        <button type="submit" class="btn btn-success" id="submitLocationBtn">Adaugă Locația</button>
                                   </div>
                              </div>
                              <hr class="mb-4">
                         </form>

                         <!-- Location list -->
                         <div id="locationList" class="row">
                              @if (Model != null && Model.Any())
                              {
                                   foreach (var location in Model)
                                   {
                                        <div class="col-12 col-lg-6 mb-3" data-location-id="@location.Id">
                                             <div class="location-card p-3">
                                                  <div class="content-wrapper">
                                                       <div class="location-image-section">
                                                            @if (!string.IsNullOrEmpty(location.ImagePath))
                                                            {
                                                                 <img src="@Url.Content(location.ImagePath)" alt="@location.Name" class="location-image">
                                                            }
                                                            else
                                                            {
                                                                 <div class="location-image-placeholder">
                                                                      <i class="bi bi-geo-alt" style="font-size: 2rem; color: #6c757d;"></i>
                                                                 </div>
                                                            }
                                                       </div>
                                                       <div class="location-details-section">
                                                            <h5 class="mb-1">@location.Name</h5>
                                                            <div class="location-meta mb-2">
                                                                 <span class="text-muted"><i class="bi bi-geo-alt me-1"></i>@location.Address</span>
                                                            </div>
                                                       </div>
                                                       <div class="location-actions-section text-end">
                                                            <div class="location-actions">
                                                                 <button class="btn btn-sm btn-outline-primary me-1" onclick="editLocation(@location.Id)">
                                                                      <i class="bi bi-pencil"></i>
                                                                 </button>
                                                                 <button class="btn btn-sm btn-outline-danger" onclick="deleteLocation(@location.Id)">
                                                                      <i class="bi bi-trash"></i>
                                                                 </button>
                                                            </div>
                                                       </div>
                                                  </div>
                                             </div>
                                        </div>
                                   }
                              }
                              else
                              {
                                   <!-- Empty state -->
                                   <div id="emptyState" class="col-12 text-center py-5">
                                        <i class="bi bi-geo-alt" style="font-size: 3rem; color: #6c757d;"></i>
                                        <p class="mt-3 text-muted">Nu există locații adăugate momentan.</p>
                                   </div>
                              }
                         </div>
                    </div>
               </div>
          </div>
     </div>
</div>

<style>
.location-card {
    background: white;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.location-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.content-wrapper {
    display: flex;
    gap: 15px;
    align-items: flex-start;
}

.location-image-section {
    flex-shrink: 0;
    width: 120px;
    height: 90px;
}

.location-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 6px;
}

.location-image-placeholder {
    width: 100%;
    height: 100%;
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.location-details-section {
    flex-grow: 1;
    min-width: 0;
}

.location-actions-section {
    flex-shrink: 0;
}

.location-meta {
    font-size: 0.9rem;
}

.location-description {
    font-size: 0.9rem;
    line-height: 1.4;
}

@@media (max-width: 768px) {
    .content-wrapper {
        flex-direction: column;
    }

    .location-image-section {
        width: 100%;
        height: 150px;
    }

    .location-actions-section {
        text-align: center !important;
    }
}
</style>

<script>
     let editingLocationId = null;

     function showLocationForm() {
          document.getElementById('locationForm').classList.remove('d-none');
          document.getElementById('locationName').focus();

          // Only reset form if it's not an edit operation
          if (!editingLocationId) {
               // Reset form for new location
               document.getElementById('locationId').value = '0';
               document.getElementById('locationForm').action = '/Admin/AddLocation';
               document.getElementById('submitLocationBtn').textContent = 'Adaugă Locația';

               // Remove edit mode indicator if it exists
               const editModeInput = document.getElementById('editMode');
               if (editModeInput) {
                    editModeInput.remove();
               }
          }
     }

     function hideLocationForm() {
          document.getElementById('locationForm').classList.add('d-none');
          clearLocationForm();
          editingLocationId = null;

          // Reset form to add mode
          document.getElementById('locationForm').action = '/Admin/AddLocation';
          document.getElementById('submitLocationBtn').textContent = 'Adaugă Locația';

          // Remove edit mode indicator
          const editModeInput = document.getElementById('editMode');
          if (editModeInput) {
               editModeInput.remove();
          }
     }

     function clearLocationForm() {
          document.getElementById('locationId').value = '0';
          document.getElementById('locationName').value = '';
          document.getElementById('locationAddress').value = '';
          document.getElementById('locationImageFile').value = '';
          document.getElementById('imagePreview').classList.add('d-none');

          // Remove validation classes
          document.querySelectorAll('#locationForm .is-invalid').forEach(field => {
               field.classList.remove('is-invalid');
          });

          // Remove edit mode indicator
          const editModeInput = document.getElementById('editMode');
          if (editModeInput) {
               editModeInput.remove();
          }
     }

     function previewLocationImage(input) {
          if (input.files && input.files[0]) {
               const reader = new FileReader();

               reader.onload = function (e) {
                    document.getElementById('previewImg').src = e.target.result;
                    document.getElementById('imagePreview').classList.remove('d-none');
               };

               reader.readAsDataURL(input.files[0]);
          }
     }

     function editLocation(locationId) {
          editingLocationId = locationId;

          // Get location data via AJAX
          fetch(`/Admin/GetLocation?locationId=${locationId}`, {
               method: 'GET',
               headers: {
                    'Content-Type': 'application/json'
               }
          })
               .then(response => response.json())
               .then(data => {
                    if (data.success) {
                         // Clear form first
                         clearLocationForm();

                         // Populate form with location data
                         document.getElementById('locationId').value = data.data.id;
                         document.getElementById('locationName').value = data.data.name;
                         document.getElementById('locationAddress').value = data.data.address;

                         // Show existing image if available
                         if (data.data.imagePath) {
                              document.getElementById('previewImg').src = data.data.imagePath;
                              document.getElementById('imagePreview').classList.remove('d-none');
                         }

                         // Update form for editing
                         const form = document.getElementById('locationForm');
                         form.action = '/Admin/UpdateLocation';
                         form.method = 'POST';

                         // Update submit button
                         const submitBtn = document.getElementById('submitLocationBtn');
                         submitBtn.textContent = 'Actualizează Locația';
                         submitBtn.type = 'submit';

                         // Add hidden field to track that this is an edit
                         let editModeInput = document.getElementById('editMode');
                         if (!editModeInput) {
                              editModeInput = document.createElement('input');
                              editModeInput.type = 'hidden';
                              editModeInput.id = 'editMode';
                              editModeInput.name = 'editMode';
                              form.appendChild(editModeInput);
                         }
                         editModeInput.value = 'true';

                         // Show form
                         document.getElementById('locationForm').classList.remove('d-none');
                         document.getElementById('locationName').focus();

                    } else {
                         showNotification('error', data.message || 'Nu s-a putut încărca locația.');
                    }
               })
               .catch(error => {
                    console.error('Error:', error);
                    showNotification('error', 'A apărut o eroare la încărcarea locației.');
               });
     }

     function deleteLocation(locationId) {
          if (confirm('Sigur doriți să ștergeți această locație? Această acțiune este ireversibilă!')) {
               const formData = new FormData();
               formData.append('locationId', locationId);

               // Add CSRF token
               const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
               formData.append('__RequestVerificationToken', token);

               fetch('/Admin/DeleteLocation', {
                    method: 'POST',
                    body: formData
               })
                    .then(response => response.json())
                    .then(data => {
                         if (data.success) {
                              // Remove location card from DOM
                              const locationCard = document.querySelector(`[data-location-id="${locationId}"]`);
                              if (locationCard) {
                                   locationCard.remove();
                              }

                              // Check if there are no more locations
                              const locationList = document.getElementById('locationList');
                              if (locationList.children.length === 0) {
                                   locationList.innerHTML = `
                        <div id="emptyState" class="col-12 text-center py-5">
                            <i class="bi bi-geo-alt" style="font-size: 3rem; color: #6c757d;"></i>
                            <p class="mt-3 text-muted">Nu există locații adăugate momentan.</p>
                        </div>
                    `;
                              }

                              showNotification('success', data.message);
                         } else {
                              showNotification('error', data.message);
                         }
                    })
                    .catch(error => {
                         console.error('Error:', error);
                         showNotification('error', 'A apărut o eroare la ștergerea locației.');
                    });
          }
     }

     function showNotification(type, message) {
          // Remove existing notifications
          const existingNotifications = document.querySelectorAll('.notification-alert');
          existingNotifications.forEach(notification => notification.remove());

          // Create notification
          const notification = document.createElement('div');
          notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show notification-alert`;
          notification.style.position = 'fixed';
          notification.style.top = '20px';
          notification.style.right = '20px';
          notification.style.zIndex = '9999';
          notification.style.minWidth = '300px';

          notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
    `;

          document.body.appendChild(notification);

          // Auto remove after 5 seconds
          setTimeout(() => {
               if (notification.parentElement) {
                    notification.remove();
               }
          }, 5000);
     }

     // Form validation and submission handling
     document.addEventListener('DOMContentLoaded', function () {
          console.log('DOM loaded, initializing location form...');

          const locationForm = document.getElementById('locationForm');

          if (locationForm) {
               console.log('Location form found');
               locationForm.addEventListener('submit', function (e) {
                    // Basic client-side validation
                    const requiredFields = ['locationName', 'locationAddress'];
                    let isValid = true;

                    requiredFields.forEach(fieldId => {
                         const field = document.getElementById(fieldId);
                         if (!field.value.trim()) {
                              field.classList.add('is-invalid');
                              isValid = false;
                         } else {
                              field.classList.remove('is-invalid');
                         }
                    });

                    if (!isValid) {
                         e.preventDefault();
                         showNotification('error', 'Vă rugăm să completați corect toate câmpurile obligatorii.');
                         return false;
                    }

                    return true;
               });
          } else {
               console.log('Location form not found');
          }

          // Remove validation styling on input
          document.querySelectorAll('#locationForm input, #locationForm textarea').forEach(field => {
               field.addEventListener('input', function () {
                    this.classList.remove('is-invalid');
               });

               field.addEventListener('change', function () {
                    this.classList.remove('is-invalid');
               });
          });
     });
</script>